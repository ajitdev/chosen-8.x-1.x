<?php

/**
 * @file
 * General functions and hook implementations.
 *
 * @see http://harvesthq.github.com/chosen/
 */

/**
 * Define chosen library url
 */
define('CHOSEN_WEBSITE_URL', 'http://harvesthq.github.io/chosen');

/**
 * Implements hook_field_widget_info_alter().
 *
 * A list of settings needed by Chosen module for widgets.
 */
function chosen_field_widget_info_alter(&$info) {
  $widget_defaults = array(
    'options_select' => '',
    'select_or_other' => '',
    'date_combo' => 0,
  );

  foreach ($widget_defaults as $widget => $default) {
    if (isset($info[$widget])) {
      $info[$widget]['settings']['apply_chosen'] = $default;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function chosen_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if (empty($form['#field']['locked']) && isset($form['#instance']['widget']['settings']['apply_chosen'])) {
    $form['instance']['widget']['settings']['apply_chosen'] = array(
      '#type' => 'select',
      '#title' => t('Apply Chosen to the select fields in this widget?'),
      '#options' => array(
        0 => t('Do not apply'),
        1 => t('Apply'),
      ),
      '#default_value' => $form['#instance']['widget']['settings']['apply_chosen'],
      '#disabled' => !_chosen_get_chosen_path(),
      '#empty_option' => t('No preference'),
      '#empty_value' => '',
      '#chosen' => FALSE,
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
function chosen_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($context['instance']['widget']['settings']['apply_chosen'])) {
    $value = $context['instance']['widget']['settings']['apply_chosen'];
    if ($value === '') {
      return;
    }
    else {
      $element['#chosen'] = !empty($value);
    }
  }
}

/**
 * Implements hook_library_alter().
 */
function chosen_library_alter(array &$library, $name) {
  $library_path = _chosen_get_chosen_path();
  $chosen_conf = \Drupal::config('chosen.settings');
  $module_path = drupal_get_path('module', 'chosen');

  if ($name == 'chosen/chosen') {
    if ($chosen_conf->get('chosen_use_theme') == TRUE) {
      $library['css'] = array($library_path . '/chosen.css' => array());
    }
  }

  if ($name == 'chosen/drupal.chosen') {
    // All the settings that are actually passed through into the chosen()
    // function are contained in this array.
    $options = array(
      'disable_search' => (bool) $chosen_conf->get('chosen_disable_search'),
      'disable_search_threshold' => (int) $chosen_conf->get('chosen_disable_search_threshold'),
      'search_contains' => (bool) $chosen_conf->get('chosen_search_contains'),
      'placeholder_text_multiple' => $chosen_conf->get('chosen_placeholder_text_multiple'),
      'placeholder_text_single' => $chosen_conf->get('chosen_placeholder_text_single'),
      'no_results_text' => $chosen_conf->get('chosen_no_results_text'),
      'inherit_select_classes' => TRUE,
    );

    $library['js'][] = array(
      'data' => array(
        'chosen' => array(
          'selector' => $chosen_conf->get('chosen_jquery_selector'),
          'minimum_single' => (int) $chosen_conf->get('chosen_minimum_single'),
          'minimum_multiple' => (int) $chosen_conf->get('chosen_minimum_multiple'),
          'minimum_width' => (int) $chosen_conf->get('chosen_minimum_width'),
          'options' => $options,
        ),
      ),
      'type' => 'setting',
    );
  }
}

/**
 * Implements hook_element_info_alter().
 *
function chosen_element_info_alter(&$info) {
  $info['select']['#pre_render'][] = 'chosen_pre_render_select';

  if (module_exists('date')) {
    $info['date_combo']['#pre_render'][] = 'chosen_pre_render_date_combo';
  }

  if (module_exists('select_or_other')) {
    $info['select_or_other']['#pre_render'][] = 'chosen_pre_render_select_or_other';
  }
}

/**
 * Render API callback: Apply Chosen to a select element.
 *
function chosen_pre_render_select($element) {
  // If the #chosen FAPI property is set, then add the appropriate class.
  if (isset($element['#chosen'])) {
    if (!empty($element['#chosen'])) {
      // Element has opted-in for Chosen, ensure the library gets added.
      $element['#attributes']['class'][] = 'chosen-enable';
    }
    else {
      $element['#attributes']['class'][] = 'chosen-disable';
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
  }
  elseif (isset($element['#attributes']['class']) && is_array($element['#attributes']['class'])) {
    if (array_intersect($element['#attributes']['class'], array('chosen-disable'))) {
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
    elseif (array_intersect($element['#attributes']['class'], array('chosen-enable', 'chosen-widget'))) {
      // Element has opted-in for Chosen, ensure the library gets added.
      // @todo Remove support for the deprecated chosen-widget class.
    }
  }
  else {
    // Neither the #chosen property was set, nor any chosen classes found.
    // This element still might match the site-wide critera, so add the library.
  }

  if (isset($element['#field_name']) && !empty($element['#multiple'])) {
    $field = field_info_field($element['#field_name']);
    if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED && $field['cardinality'] > 1) {
      $element['#attributes']['data-cardinality'] = $field['cardinality'];
    }
  }

  $element['#attached']['library'][] = array('chosen', 'drupal.chosen');
  return $element;
}

/**
 * Render API callback: Apply Chosen to a date_combo element.
 *
function chosen_pre_render_date_combo($element) {
  // Because the date_combo field contains many different select elements, we
  // need to recurse down and apply the FAPI property to each one.
  if (isset($element['#chosen'])) {
    chosen_element_apply_property_recursive($element, $element['#chosen']);
  }
  return $element;
}

/**
 * Render API callback: Apply Chosen to a select_or_other element.
 *
function chosen_pre_render_select_or_other($element) {
  if ($element['#select_type'] == 'select' && isset($element['#chosen'])) {
    $element['select']['#chosen'] = $element['#chosen'];
  }
  return $element;
}

/**
 * Recurse through an element to apply the chosen property to any select fields.
 *
function chosen_element_apply_property_recursive(array &$element, $chosen_value = NULL) {
  if (!isset($chosen_value)) {
    if (isset($element['#chosen'])) {
      $chosen_value = $element['#chosen'];
    }
    else {
      return;
    }
  }
  if (isset($element['#type']) && $element['#type'] == 'select') {
    $element['#chosen'] = $chosen_value;
  }
  foreach (element_children($element) as $key) {
    chosen_element_apply_property_recursive($element[$key], $chosen_value);
  }
}

/**
 * Get the location of the chosen library.
 *
 * @return
 *   The location of the library, or FALSE if the library isn't installed.
 */
function _chosen_get_chosen_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('chosen');
  }

  // The following logic is taken from libraries_get_libraries()
  $searchdir = array();

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory.
  $searchdir[] = 'profiles/' . drupal_get_profile() . '/libraries';

  // Always search libraries.
  $searchdir[] = 'libraries';

  // Also search sites/<domain>/*.
  $searchdir[] = conf_path() . '/libraries';

  foreach ($searchdir as $dir) {
    if (file_exists($dir . '/chosen/chosen.jquery.min.js')) {
      return $dir . '/chosen';
    }
  }

  return FALSE;
}
